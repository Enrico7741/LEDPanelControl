//--------------------------------------------------------------------------------------------------
// LED-Panel-Control
// Copyright (C) 2020 Enrico Sch√∂rnick
// Licensed under the MIT License
//--------------------------------------------------------------------------------------------------

#include "Panel.hpp"

#include <sys/time.h>
#include <math.h>

#include <iostream>
#include <thread>
#include <chrono>

Panel::~Panel()
{
    matrix->Clear();
    delete matrix;
}

bool Panel::initialize()
{
    rgb_matrix::RGBMatrix::Options my_defaults;
    //my_defaults.show_refresh_rate = true;
    my_defaults.brightness = brightness;
    my_defaults.cols = cols;
    my_defaults.rows = rows;
    my_defaults.hardware_mapping = "adafruit-hat-pwm";

    rgb_matrix::RuntimeOptions runtime_defaults;
    runtime_defaults.drop_privileges = 1;
    runtime_defaults.do_gpio_init = true;

    matrix = rgb_matrix::RGBMatrix::CreateFromOptions(my_defaults, runtime_defaults);

    if (matrix == NULL)
    {
        std::cout << "Error: Couldn't create RGBMatrix." << std::endl;
        return false;
    }

    frame = matrix->CreateFrameCanvas();

    if (frame == NULL)
    {
        std::cout << "Error: Couldn't create frame." << std::endl;
        return false;
    }

    return true;
}

void Panel::run(SceneCreator& sceneCreator)
{


    /*
    using namespace std::chrono;

    auto running = true;

    const auto STATUS = '0';
    const auto TURNON = '1';
    const auto TURNOFF = '2';
    const auto BRIGHTNESS = '3';
    const auto NEXT = '4';
    const auto PREV = '5';

    auto animation = imageManager.getImage();
    auto endTime = steady_clock::now() + milliseconds(animation.animationDurationMs);

    while(true)
    {
        std::string str;
        if(messageQueue.pop(str))
        {
            if(str[0] == STATUS)
            {

            }
            else if(str[0] == TURNON)
            {
                running = true;
            }
            else if(str[0] == TURNOFF)
            {
                matrix->Clear();
                running = false;
            }
            else if(str[0] == BRIGHTNESS)
            {   
                matrix->SetBrightness(std::stoi(str.substr(2)));
            }
            else if(str[0] == NEXT)
            {
                endTime = steady_clock::now() + milliseconds(animation.animationDurationMs);
                animation = imageManager.getImage();
            }
            else if(str[0] == PREV)
            {
                endTime = steady_clock::now() + milliseconds(animation.animationDurationMs);
                animation = imageManager.getPrevImage();
            }
        }

        if (running)
        {
            //if (duration_cast<std::chrono::microseconds>(endTime - steady_clock::now()).count() < animation.animationDurationMs)
            //{
            //    animation = imageManager.getImage();
            //}
            displayFrame(animation.getNextFrame());
            frame = matrix->SwapOnVSync(frame);
            std::this_thread::sleep_for(milliseconds(animation.animationDelayMs));
        }
    }
        */
        using namespace std::chrono_literals;

        while(true)
        {
std::cout << "1" << std::endl;
        displayFrame(sceneCreator);
 std::cout << "2" << std::endl;      
 frame = matrix->SwapOnVSync(frame);
std::cout << "3" << std::endl;
        std::this_thread::sleep_for(40ms);

        }

}

void Panel::displayFrame(SceneCreator& sceneCreator)
{
    const auto f = sceneCreator.cene->getNextFrame();
    for (size_t y = 0; y < 64; ++y)
    {
        for (size_t x = 0; x < 64; ++x)
        {
            frame->SetPixel(x,y, f.pixel[x][y].R, f.pixel[x][y].G, f.pixel[x][y].B);
            //frame->SetPixel(x, y, 100, 100, 100);
        }
    }
}
